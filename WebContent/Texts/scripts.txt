create table admin_table (
  username varchar2(50) not null primary key,
  password varchar2(50) not null,
  fullname varchar2(100) not null,
  address varchar2(100) not null,
  email varchar2(100) not null
);


CREATE TABLE faculty_table (
  id INT not null primary key,
  name VARCHAR2(100) NOT NULL,
  system VARCHAR2(100) CHECK(system IN('yearly','semester-wise')) NOT NULL,
  length INT CHECK(length <= 8 and length >= 1) NOT NULL,
  description VARCHAR2(500)
);

CREATE TABLE user_table (
  username varchar2(50) not null primary key,
  password varchar2(50) not null,
  fullname varchar2(100) not null,
  address varchar2(100) not null,
  email varchar2(100) not null,
  faculty_id INT references faculty_table (id),
  gender varchar2(20) not null check(gender in('male','female')),
  joined_date date not null
);

CREATE TABLE register_table (
  username varchar2(50) not null primary key,
  password varchar2(50) not null,
  fullname varchar2(100) not null,
  address varchar2(100) not null,
  email varchar2(100) not null,
  faculty_id INT references faculty_table (id),
  gender varchar2(20) not null check(gender in('male','female')),
  joined_date date not null
);

CREATE TABLE book_table (
  id int not null primary key,
  name varchar2(200) not null,
  author varchar2(200) not null,
  publisher varchar2(200) not null,
  edition varchar2(200) not null,
  faculty_id int not null references faculty_table (id),
  quantity int default 0,
  price decimal not null
);

create table book_serials (
  id int not null primary key,
  book_id int not null references book_table (id)
);

create table grant_table (
  book_serial int not null primary key references book_serials (id),
  username varchar2(50) not null references user_table (username),
  received_date date not null,
  return_date date not null
);

create table request_table (
  sn int not null primary key,
  username varchar2(50) not null references user_table (username),
  book_id int not null references book_table (id),
  request_date date not null
);

create sequence sq_request_sn
start with 1
increment by 1;

create or replace trigger tr_request
before insert on request_table
for each row
begin
  select sq_request_sn.nextval
  into :new.sn
  from dual;
end;

create table social_table (
  facebook varchar2(300),
  twitter varchar2(300),
  linkedin varchar2(300),
  fine_per_day int
);

insert into social_table values ('http://www.facebook.com','http://www.twitter.com','http://www.linkedin.com',5);

**** NOT REQUIRED
create table available_table (
  book_serial int not null primary key references book_serials (id),
  book_id int not null references book_table (id),
  book_name varchar2(200) not null,
  book_author varchar2(200) not null,
  book_edition varchar2(200) not null 
);
